<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.spring.boot.dao.AdminDAO">
    <select id="selectQuizType" resultType="QuizTypeVO">
    	SELECT *
    	FROM
    		QUIZ_TYPE
    	ORDER BY QT_NUM DESC
    </select>
    
    <insert id="insertQuizType">
    	INSERT INTO QUIZ_TYPE(QT_NAME) VALUES 
    	(#{qt_name})
    </insert>
    
    <delete id="deleteQuizType">
    	DELETE FROM QUIZ_TYPE WHERE QT_NUM = #{qt_num}
    </delete>
    
    <update id="updateQuizType">
    	UPDATE QUIZ_TYPE SET QT_NAME = #{qt_name} WHERE QT_NUM = #{qt_num}
    </update>
    
    <select id="getQuizCount" resultType="int">
    	SELECT COUNT(*)
    	FROM
   		<if test="cri.type == 'choice'">
   			QUIZ_CHOICE
   		</if>
   		<if test="cri.type == 'subjective'">
   			QUIZ_SUBJECTIVE
   		</if>
   		WHERE 
   			QT_NUM = #{qt_num}
    </select>
    
    <select id="selectQuizListByChoice" resultType="QuizChoiceVO">
    	SELECT *
    	FROM
    		QUIZ_CHOICE
    	WHERE
    		QT_NUM = #{qt_num}
    	ORDER BY QU_NUM DESC
    	LIMIT #{cri.pageStart}, #{cri.perPageNum}
    </select>
    
    <select id="selectQuizListBySubjective" resultType="QuizSubjectiveVO">
    	SELECT *
    	FROM
    		QUIZ_SUBJECTIVE
    	WHERE
    		QT_NUM = #{qt_num}
    	ORDER BY QS_NUM DESC
    	LIMIT #{cri.pageStart}, #{cri.perPageNum}
    </select>
    
    <select id="selectQuizTypeName" resultType="String">
    	SELECT QT_NAME
    	FROM
    		QUIZ_TYPE
    	WHERE
    		QT_NUM = #{qt_num}
    </select>
    
    <insert id="insertQuizChoice">
    	INSERT INTO QUIZ_CHOICE(QU_CONTENT, QU_ANSWER1, QU_ANSWER2, QU_ANSWER3, QU_ANSWER4, QU_CORRECT_ANSWER, QT_NUM) VALUES
    	(#{quiz.qu_content}, #{quiz.qu_answer1}, #{quiz.qu_answer2}, #{quiz.qu_answer3}, #{quiz.qu_answer4}, #{quiz.qu_correct_answer}, #{quiz.qt_num})
    </insert>
    
    <insert id="insertQuizSubjective">
    	INSERT INTO QUIZ_SUBJECTIVE(QS_CONTENT, QS_CORRECT_ANSWER, QT_NUM) VALUES
    	(#{quiz.qs_content}, #{quiz.qs_correct_answer}, #{quiz.qt_num})
    </insert>
    
    <delete id="deleteQuizChoice">
    	DELETE FROM QUIZ_CHOICE WHERE QU_NUM = #{quiz.qu_num}
    </delete>
    
    <delete id="deleteQuizSubjective">
    	DELETE FROM QUIZ_SUBJECTIVE WHERE QS_NUM = #{quiz.qs_num}
    </delete>
    
    <select id="selectQuizChoice" resultType="QuizChoiceVO">
    	SELECT * FROM QUIZ_CHOICE WHERE QU_NUM = #{qu_num}
    </select>
    
    <select id="selectQuizSubjective" resultType="QuizSubjectiveVO">
    	SELECT * FROM QUIZ_SUBJECTIVE WHERE QS_NUM = #{qs_num}
    </select>
    
    <update id="updateQuizChoice">
    	UPDATE QUIZ_CHOICE 
    	SET
    		QU_CONTENT = #{quiz.qu_content},
    		QU_ANSWER1 = #{quiz.qu_answer1},
    		QU_ANSWER2 = #{quiz.qu_answer2},
    		QU_ANSWER3 = #{quiz.qu_answer3},
    		QU_ANSWER4 = #{quiz.qu_answer4},
    		QU_CORRECT_ANSWER = #{quiz.qu_correct_answer}
    	WHERE
    		QU_NUM = ${quiz.qu_num}
    </update>
    
    <update id="updateQuizSubjective">
    	UPDATE QUIZ_SUBJECTIVE
    	SET
    		QS_CONTENT = #{quiz.qs_content},
    		QS_CORRECT_ANSWER = #{quiz.qs_correct_answer}
    	WHERE
    		QS_NUM = #{quiz.qs_num}
    </update>
    
    <select id="selectMemberList" resultType="MemberVO">
    	SELECT * 
		FROM 
			MEMBER 
		WHERE
		<choose>
			<when test="cri.type == 'id'">
				MB_ID LIKE CONCAT('%', #{cri.search}, '%')
			</when>
			<when test="cri.type == 'nick'">
				MB_NICK LIKE CONCAT('%', #{cri.search}, '%')
			</when>
			<when test="cri.type == 'name'">
				MB_NAME LIKE CONCAT('%', #{cri.search}, '%')
			</when>
			<otherwise>
				MB_ID LIKE CONCAT('%', #{cri.search}, '%') OR MB_NICK LIKE CONCAT('%', #{cri.search}, '%') OR MB_NAME LIKE CONCAT('%', #{cri.search}, '%')
			</otherwise>
		</choose>
		ORDER BY MB_NUM DESC
		LIMIT #{cri.pageStart}, #{cri.perPageNum}
    </select>
    
    <select id="selectMemberCount" resultType="int">
    	SELECT COUNT(*) 
		FROM 
			MEMBER
		WHERE
		<choose>
			<when test="cri.type == 'id'">
				MB_ID LIKE CONCAT('%', #{cri.search}, '%')
			</when>
			<when test="cri.type == 'nick'">
				MB_NICK LIKE CONCAT('%', #{cri.search}, '%')
			</when>
			<when test="cri.type == 'name'">
				MB_NAME LIKE CONCAT('%', #{cri.search}, '%')
			</when>
			<otherwise>
				MB_ID LIKE CONCAT('%', #{cri.search}, '%') OR MB_NICK LIKE CONCAT('%', #{cri.search}, '%') OR MB_NAME LIKE CONCAT('%', #{cri.search}, '%')
			</otherwise>
		</choose>
    </select>
    
    <select id="selectMember" resultType="MemberVO">
    	SELECT *
    	FROM
    		MEMBER
    	WHERE MB_NUM = #{mb_num}
    </select>
    
    <update id="deleteMember">
    	UPDATE MEMBER
    	SET
   		<if test="user.mb_out_date == null">
   			MB_OUT_DATE = NOW()
   		</if>
   		<if test="user.mb_out_date != null">
   			MB_OUT_DATE = NULL
   		</if>
   		WHERE
   			MB_NUM = #{user.mb_num}
    </update>
    
    <select id="selectPointList" resultType="PointVO">
    	SELECT * 
		FROM 
			POINT
		WHERE
		<choose>
			<when test="cri.type == 'id'">
				MB_ID LIKE CONCAT('%', #{cri.search}, '%')
			</when>
			<when test="cri.type == 'content'">
				PI_CONTENT LIKE CONCAT('%', #{cri.search}, '%')
			</when>
			<otherwise>
				MB_ID LIKE CONCAT('%', #{cri.search}, '%') OR PI_CONTENT LIKE CONCAT('%', #{cri.search}, '%')
			</otherwise>
		</choose>
		ORDER BY PI_NUM DESC
		LIMIT #{cri.pageStart}, #{cri.perPageNum}
    </select>
    
    <select id="selectPointCount" resultType="int">
    	SELECT COUNT(*) 
		FROM 
			POINT
		WHERE
		<choose>
			<when test="cri.type == 'id'">
				MB_ID LIKE CONCAT('%', #{cri.search}, '%')
			</when>
			<when test="cri.type == 'CONTENT'">
				PI_CONTENT LIKE CONCAT('%', #{cri.search}, '%')
			</when>
			<otherwise>
				MB_ID LIKE CONCAT('%', #{cri.search}, '%') OR PI_CONTENT LIKE CONCAT('%', #{cri.search}, '%')
			</otherwise>
		</choose>
    </select>
    
    <select id="selectMemberById">
    	SELECT *
    	FROM
    		MEMBER
    	WHERE
    		MB_ID = #{mb_id}
    </select>
    
    <update id="updateMemberPoint">
    	UPDATE MEMBER SET MB_POINT = MB_POINT + #{point.pi_no} WHERE MB_ID = #{point.mb_id} AND MB_POINT + #{point.pi_no} > 0
    </update>
    
    <insert id="insertPoint">
    	INSERT INTO POINT(PI_NO, PI_CONTENT, PI_DATETIME, MB_ID) VALUES
    	(#{point.pi_no}, #{point.pi_content}, NOW(), #{point.mb_id})
    </insert>
    
    <select id="selectPoint">
    	SELECT * FROM POINT WHERE PI_NUM = #{pi_num}
    </select>
    
    <update id="updatePoint">
    	UPDATE POINT SET PI_CONTENT = #{point.pi_content} WHERE PI_NUM = #{point.pi_num}
    </update>
</mapper>